//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `30173-welcome-screen.json`.
    static let welcomeScreenJson = Rswift.FileResource(bundle: R.hostingBundle, name: "30173-welcome-screen", pathExtension: "json")
    /// Resource file `Product.xcconfig`.
    static let productXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Product", pathExtension: "xcconfig")
    /// Resource file `Staging.xcconfig`.
    static let stagingXcconfig = Rswift.FileResource(bundle: R.hostingBundle, name: "Staging", pathExtension: "xcconfig")

    /// `bundle.url(forResource: "30173-welcome-screen", withExtension: "json")`
    static func welcomeScreenJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.welcomeScreenJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Product", withExtension: "xcconfig")`
    static func productXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.productXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Staging", withExtension: "xcconfig")`
    static func stagingXcconfig(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.stagingXcconfig
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 14 images.
  struct image {
    /// Image `alpha_green_48pt`.
    static let alpha_green_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "alpha_green_48pt")
    /// Image `alpha_white_48pt`.
    static let alpha_white_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "alpha_white_48pt")
    /// Image `baseline_close_black_48dp`.
    static let baseline_close_black_48dp = Rswift.ImageResource(bundle: R.hostingBundle, name: "baseline_close_black_48dp")
    /// Image `book_green_48pt`.
    static let book_green_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "book_green_48pt")
    /// Image `book_white_48pt`.
    static let book_white_48pt = Rswift.ImageResource(bundle: R.hostingBundle, name: "book_white_48pt")
    /// Image `btn_back`.
    static let btn_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_back")
    /// Image `btn_next`.
    static let btn_next = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_next")
    /// Image `chat_green`.
    static let chat_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_green")
    /// Image `chat_white`.
    static let chat_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "chat_white")
    /// Image `icon24Download`.
    static let icon24Download = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon24Download")
    /// Image `icon24X`.
    static let icon24X = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon24X")
    /// Image `menu_green`.
    static let menu_green = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_green")
    /// Image `menu_white`.
    static let menu_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "menu_white")
    /// Image `no_image`.
    static let no_image = Rswift.ImageResource(bundle: R.hostingBundle, name: "no_image")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alpha_green_48pt", bundle: ..., traitCollection: ...)`
    static func alpha_green_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alpha_green_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "alpha_white_48pt", bundle: ..., traitCollection: ...)`
    static func alpha_white_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.alpha_white_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "baseline_close_black_48dp", bundle: ..., traitCollection: ...)`
    static func baseline_close_black_48dp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.baseline_close_black_48dp, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "book_green_48pt", bundle: ..., traitCollection: ...)`
    static func book_green_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book_green_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "book_white_48pt", bundle: ..., traitCollection: ...)`
    static func book_white_48pt(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.book_white_48pt, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_back", bundle: ..., traitCollection: ...)`
    static func btn_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "btn_next", bundle: ..., traitCollection: ...)`
    static func btn_next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_next, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_green", bundle: ..., traitCollection: ...)`
    static func chat_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "chat_white", bundle: ..., traitCollection: ...)`
    static func chat_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.chat_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon24Download", bundle: ..., traitCollection: ...)`
    static func icon24Download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon24Download, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon24X", bundle: ..., traitCollection: ...)`
    static func icon24X(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon24X, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_green", bundle: ..., traitCollection: ...)`
    static func menu_green(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_green, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "menu_white", bundle: ..., traitCollection: ...)`
    static func menu_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.menu_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "no_image", bundle: ..., traitCollection: ...)`
    static func no_image(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.no_image, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 8 nibs.
  struct nib {
    /// Nib `CustomNewsViewController`.
    static let customNewsViewController = _R.nib._CustomNewsViewController()
    /// Nib `DetailViewPhotoViewController`.
    static let detailViewPhotoViewController = _R.nib._DetailViewPhotoViewController()
    /// Nib `MenuViewController`.
    static let menuViewController = _R.nib._MenuViewController()
    /// Nib `ProfileViewController`.
    static let profileViewController = _R.nib._ProfileViewController()
    /// Nib `TabBarViewController`.
    static let tabBarViewController = _R.nib._TabBarViewController()
    /// Nib `TopHeadlineCell`.
    static let topHeadlineCell = _R.nib._TopHeadlineCell()
    /// Nib `TopHeadlineViewController`.
    static let topHeadlineViewController = _R.nib._TopHeadlineViewController()
    /// Nib `WebViewController`.
    static let webViewController = _R.nib._WebViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomNewsViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customNewsViewController) instead")
    static func customNewsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customNewsViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DetailViewPhotoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.detailViewPhotoViewController) instead")
    static func detailViewPhotoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.detailViewPhotoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MenuViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.menuViewController) instead")
    static func menuViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ProfileViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.profileViewController) instead")
    static func profileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TabBarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tabBarViewController) instead")
    static func tabBarViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopHeadlineCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topHeadlineCell) instead")
    static func topHeadlineCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topHeadlineCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TopHeadlineViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.topHeadlineViewController) instead")
    static func topHeadlineViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.topHeadlineViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "WebViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.webViewController) instead")
    static func webViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.webViewController)
    }
    #endif

    static func customNewsViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customNewsViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func detailViewPhotoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.detailViewPhotoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func menuViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.menuViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func profileViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.profileViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tabBarViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tabBarViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func topHeadlineCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopHeadlineCell? {
      return R.nib.topHeadlineCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopHeadlineCell
    }

    static func topHeadlineViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.topHeadlineViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func webViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.webViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `TopHeadlineCell`.
    static let topHeadlineCell: Rswift.ReuseIdentifier<TopHeadlineCell> = Rswift.ReuseIdentifier(identifier: "TopHeadlineCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DetailViewPhotoViewController.validate()
      try _TopHeadlineCell.validate()
      try _WebViewController.validate()
    }

    struct _CustomNewsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomNewsViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DetailViewPhotoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DetailViewPhotoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "icon24Download", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon24Download' is used in nib 'DetailViewPhotoViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon24X", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon24X' is used in nib 'DetailViewPhotoViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MenuViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ProfileViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProfileViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TabBarViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TabBarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TopHeadlineCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TopHeadlineCell

      let bundle = R.hostingBundle
      let identifier = "TopHeadlineCell"
      let name = "TopHeadlineCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TopHeadlineCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TopHeadlineCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "no_image", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'no_image' is used in nib 'TopHeadlineCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _TopHeadlineViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TopHeadlineViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _WebViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WebViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "baseline_close_black_48dp", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'baseline_close_black_48dp' is used in nib 'WebViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_back' is used in nib 'WebViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_next", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_next' is used in nib 'WebViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
